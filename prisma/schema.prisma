// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  emailVerified DateTime?
  image     String?
  role      Role       @default(USER)
  runs      Run[]    @relation("OrganizedRuns")
  rsvps     RSVP[]
  attendedRuns Attendance[] @relation("UserAttendance")
  photos    Photo[]  @relation("UploadedPhotos")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
}

model Run {
  id          String   @id @default(cuid())
  number      Int      @unique
  descriptor  String
  dateTime    DateTime
  address     String
  lat         Float?
  lng         Float?
  introLink   String?
  organizer   User     @relation("OrganizedRuns", fields: [organizerId], references: [id])
  organizerId String
  rsvps       RSVP[]
  photos      Photo[]
  attendees   Attendance[] @relation("RunAttendance")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RSVP {
  id        String     @id @default(cuid())
  runId     String
  userId    String
  status    RSVPStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  run       Run        @relation(fields: [runId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([runId, userId])
}

enum RSVPStatus {
  YES
  NO
  MAYBE
}

model Photo {
  id         String   @id @default(cuid())
  storageKey String
  url        String?
  caption    String?
  runId      String
  uploaderId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  run        Run      @relation(fields: [runId], references: [id], onDelete: Cascade)
  uploadedBy User     @relation("UploadedPhotos", fields: [uploaderId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attendance {
  id        String   @id @default(cuid())
  runId     String
  userId    String
  markedAt  DateTime @default(now())

  run  Run  @relation("RunAttendance", fields: [runId], references: [id], onDelete: Cascade)
  user User @relation("UserAttendance", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([runId, userId])
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}
